// Code generated by go-bindata.
// sources:
// wwwroot/templates/index.html
// wwwroot/templates/layout.html
// wwwroot/templates/ticket.html
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wwwrootTemplatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\xdd\x6e\xdb\x38\x13\xbd\xcf\x53\xcc\xc7\xe6\x43\x93\x6d\x2d\x39\x6d\x0a\x2c\x6c\xd9\xbb\x6d\x93\x76\xbb\xe8\xfe\x60\x93\x5e\xf4\x92\x16\xc7\x16\x11\x8a\xd4\x92\x23\xff\x40\xd0\xbb\x2f\x28\xc9\xb6\x6c\xc9\x69\x16\x28\xd6\x17\x89\x45\x8e\x87\x67\x86\x67\xce\x8c\x8a\x02\x04\xce\xa5\x46\x60\xb1\xd1\x84\x9a\x18\x94\xe5\x59\x24\xe4\x12\x1c\x6d\x14\x4e\x58\xca\xd7\x83\x95\x14\x94\x8c\xae\x87\xc3\x6c\x3d\x86\x94\xdb\x85\xd4\xa3\x57\xc3\x6c\x0d\x3c\x27\x33\x86\x04\xe5\x22\xa1\xd1\x55\xb5\xcf\xa6\x67\x00\x00\x6d\x17\x84\x6b\x1a\x70\x25\x17\x7a\x04\x31\x6a\x42\xbb\xb5\xaa\x2c\x93\xd7\x5b\xc3\xd8\x28\x63\x47\xcf\x86\x1f\x7e\x7c\xfb\xe6\xc3\x98\x4d\xdf\x27\x56\x3a\x4a\xb9\x83\xcf\xfe\x04\x07\x37\x56\x2e\x11\xee\x13\x9b\x47\x61\xf2\x7a\xef\xa3\x28\x60\x25\x29\x81\xe0\xd6\x5a\x63\x7f\x73\x8b\xb2\xac\x00\xc4\x8a\x3b\x37\x61\x5c\xa1\x25\xa8\xfe\x0e\x04\xd7\x0b\xb4\x0c\xac\xf1\x27\x56\x6b\x6c\x5a\x14\x41\x59\x46\xa1\x90\xcb\x69\x51\xa0\x16\x65\xd9\x75\x7d\x97\xc7\x31\x3a\xf7\xa8\x73\x57\xdb\xfc\x2b\xef\x72\x0e\xc1\x1d\x6a\xba\x4d\xb9\x54\xef\x8d\x9e\x4b\x9b\x42\xcb\x64\x97\xcd\x27\x9f\x77\xf0\x53\xff\x79\xab\x01\xbd\x77\x48\xb8\x83\x19\xa2\x06\x87\x9a\x80\x0c\x44\x8e\xac\xd1\x8b\x69\x51\x9c\x07\x15\x00\x0f\xb4\x59\xab\xe3\xe6\xa0\xa4\x7e\xf0\xb6\x71\x83\x6d\x63\x72\x0b\x24\xe3\x07\xa4\xe0\x10\x65\x15\x62\x3b\x36\xd4\xc2\x87\xd2\x4d\xe6\xc7\x1c\x1d\x1d\x04\xd9\x64\xe2\xbe\xf2\xeb\x3a\x09\x20\x3e\x53\xb8\x4d\x41\xf5\xd0\x13\x67\x44\x09\x72\xb1\xb3\xf2\x0f\x03\xe5\x99\xd3\x63\x5b\xdb\xdb\x53\x1b\x09\xb8\xd8\x64\x35\x27\x19\xc4\x46\xb9\x8c\xeb\x09\x7b\xc5\xa6\x5f\x7d\xf8\x0d\xcc\x28\xa4\xe4\x84\x87\xb0\xcf\xb7\xb7\x47\x2e\xfa\x90\xcf\x8c\xd8\xf4\xbb\x2a\x0a\xb0\x9e\xb4\x70\x2e\xb5\xc0\xf5\x4b\x38\x77\x30\x9a\x9c\x4c\xd5\x37\x83\xab\x37\x85\xbf\x73\x17\xdc\x29\x43\xc1\x07\x63\x53\x4e\xc0\x7e\xe5\x1a\x86\xaf\x5e\xc2\xeb\xd1\xf0\x3a\x4b\xbd\x14\x44\x21\xf5\xa0\x6d\x79\xe9\xab\x71\xfb\x48\xca\x77\x3f\xe5\x90\x58\x9c\x4f\x58\x58\x14\x35\x1b\x3e\xdd\x94\x65\x58\xd3\x2a\xdc\x43\xfb\xa2\xe5\xba\x2c\xd9\xf6\x4e\x67\xa4\x61\x46\x7a\x90\x59\x99\x72\xbb\xa9\xbe\xbb\x94\x4d\x97\x12\x57\x51\xc8\x9f\x78\xe6\xb3\x98\xeb\x18\x15\x03\xa3\x63\x25\xe3\x87\x09\xab\x17\xea\x8c\x5e\x1c\x9f\x7e\x39\xb6\x48\xb9\xd5\x17\x73\xae\x1c\x5e\x8e\x3b\x68\x4c\x4e\x4a\x6a\x6c\xb4\x65\x07\xaa\x76\xfa\x28\xac\xd3\xf9\xed\x27\x10\xb4\xeb\xca\x3f\xf4\x51\xac\x4b\xa5\x28\xac\x4a\x66\x7a\x58\x6f\xa8\x1c\x76\x0a\x2d\xb9\x9e\xde\xa1\xc2\x98\x80\x37\x45\x0e\x24\x53\x84\x19\x2a\xb3\x02\xae\x7d\x79\xc9\xf8\x01\xa2\xd9\xf4\x4b\x26\x38\x61\xf8\x11\xa9\xa9\x87\x28\x9c\x4d\xbd\x52\x58\x74\x68\x97\x18\x44\x61\x72\x7d\x7c\x66\xad\x08\xfd\x2b\x67\xc7\xba\x58\x11\xe3\xd8\xfe\x08\xb5\x47\x7c\xeb\x9b\x4a\x2d\x4c\xb5\xd0\x71\x21\x2c\x3a\x57\xe1\x75\xfb\x70\x52\x6c\xc1\xdb\x05\x78\x08\xb3\x0b\x32\x9a\x1b\x9b\xee\xfb\xa1\x6f\x7f\x03\x32\xd9\xe8\xea\x4d\xb6\x66\x90\x22\x25\x46\x4c\xd8\x9f\x7f\xdc\xdd\x33\xe0\x31\x49\xa3\x2b\x5a\x1f\x28\x9d\x67\x39\xd2\xbd\x79\x40\xed\x1f\xaa\x2e\xc0\x40\x8a\x09\xab\x31\xf8\x12\x3c\x2a\x99\xb6\xe8\x7b\x04\x83\x85\x35\x79\xd6\x53\x57\xa7\x92\xb5\x73\x24\x75\x96\x13\xd0\xc6\xeb\x59\x22\x85\x40\xcd\x40\xf3\x14\x27\xac\xca\x16\x83\x25\x57\x39\x4e\x58\xab\x0b\xf4\xa9\xeb\x69\x37\x35\xd3\x9d\x32\xb4\xf3\xd5\x8f\xb3\x8f\x72\x1d\xdf\x0d\xa8\x76\xe8\x7e\x3a\xb1\x46\x41\xfb\x61\xa0\x16\x47\x61\x64\x8a\xc7\x98\x18\x25\xd0\x4e\x98\x67\xc3\xcf\xd5\x46\x10\x9b\xf4\x89\x31\x76\x2f\x7f\xfb\xe9\x42\x6e\x78\x55\x23\xa8\x63\x7f\x0a\xe4\xde\x43\x7b\x05\xde\x4b\x50\xaf\xbc\x47\x26\xf3\x2c\x6b\x85\x74\xa4\x96\x82\x13\x1f\x78\x48\x83\x1a\xdd\x53\xa4\x9e\x41\x51\xc8\x39\xe0\xdf\xd0\xf6\x06\xe7\x41\x2d\x07\x28\xfc\x5a\x59\xba\xe6\xa9\xe1\xf0\x29\x89\xfa\xf6\x79\x50\xeb\xec\xdb\x25\x97\xca\x8b\x53\xd3\xce\xca\x12\xb8\x5f\xba\xec\x51\xb6\x3a\xec\x47\x6e\xad\xff\xa2\xc2\x1a\xf3\xb1\x24\x1e\x0c\x2b\xf0\x94\x3a\x9a\xe5\x44\x46\x37\x2c\x75\xf9\x2c\x95\xd4\xe9\x05\xad\x1e\xe0\xf9\xd9\xa8\x46\x3d\x41\x5f\x0d\x87\xff\x67\xbd\xb2\x59\x39\xee\x29\x39\x97\x72\xa5\x2a\x99\xc8\xb8\x73\x2b\x63\xc5\x2f\xa8\xb2\x77\xca\xc4\x0f\x87\x6c\xf3\xfd\x17\xaa\x26\x9c\xe6\x84\xe2\x44\xf7\xfd\x6a\x72\x48\xf9\x06\x8c\x56\x1b\x48\xf8\x12\xe1\xaa\x51\x43\x5e\x11\x2a\x43\x0b\x82\x6f\x82\xbe\x1c\x7a\x24\xd3\x3e\xa7\x9d\xa4\x3f\x56\xe7\xdf\x27\x85\x7f\x35\x0a\xde\x8c\xaf\x55\x82\x3c\xdd\x7f\xe7\x29\xb2\xe9\x6e\x82\xfd\x6f\x12\xfb\xde\xf7\x43\xa9\x17\xbb\xbe\xb2\x92\x4a\xf9\x09\x5b\x00\xdf\x0e\xde\xc7\xe3\x73\x2b\xe9\x41\x73\x2d\xb9\xa3\xa6\xb5\x52\x82\x5b\xeb\xfa\x5a\x6a\x1f\x9d\x83\xb7\x43\x7c\xab\xef\xf5\x8f\xe9\x2f\x21\xd7\xcd\x32\x8a\xf6\xd9\xae\x62\x03\xae\x33\x69\x11\x04\x66\xa8\x85\x0f\xc4\x68\x10\x98\x72\x2d\xbe\x03\x11\x76\x75\xd9\xb1\x88\x42\x9f\xe0\x7d\x3e\x0f\xbf\x34\xf5\xd9\x79\x99\xcc\x8c\x93\x1e\xfa\x08\xe6\x72\x8d\x62\x0c\x33\x43\x64\xd2\xd1\x70\x0c\x0a\xe7\xe4\xff\xef\x99\x72\xf0\x9e\xc9\x7b\x98\xd4\x0c\x84\x09\x51\x36\x0a\xc3\x85\xe5\x5a\x12\xce\xf8\x26\x98\xf1\x8d\x93\x02\x8d\xf6\x83\x9d\x6f\x20\x61\xbc\x7d\x19\x1d\x08\xff\x16\x3a\xa0\xc4\xe6\x83\x85\x5c\x4a\xbd\x08\x4f\xcd\xa7\x6c\x7a\x63\x34\x27\xdc\xcd\x80\x4d\x54\xdb\xe0\x22\x17\x5b\x99\x35\xca\x34\xcf\x75\x35\x3c\xc0\xc1\x30\xea\x69\x7d\x09\xc5\x2e\x8c\x30\x8c\x8d\x76\x46\x61\xa0\xcc\xa2\xde\x1d\xef\x36\x97\xdc\x82\x80\x09\x68\x5c\xc1\x0d\x27\xac\xf6\x7f\xb8\x1a\x0e\x87\x2d\x23\x39\x87\x8b\xff\xad\xa4\x16\x66\x15\x34\xac\xb8\x60\xdc\xa2\x67\x0c\xb8\xbc\xf9\xb2\xe2\x35\xb9\x6a\x30\x15\x27\x9b\x71\x70\x6e\x2c\xb0\x17\x20\x02\x32\x9f\x4d\xcc\x15\xde\x91\x95\x7a\x71\x71\xf9\x82\xc1\x4f\xec\xb2\x0d\xd6\x7f\xea\xd9\x79\x7f\x7c\x79\x80\x76\x6e\x53\x98\x80\x30\x71\x9e\xa2\xa6\x60\x81\x74\xab\xd0\x7f\x7d\xb7\xf9\x24\x2e\x9e\xef\x87\xa3\xe7\xad\x08\xe6\x36\x0d\xf6\x23\x47\x50\xb5\x41\x98\x80\x7f\x38\x34\xaa\x05\xe6\xa2\xf9\x69\x79\x16\x85\xdb\x84\x9f\xed\xb8\xf9\x4f\x00\x00\x00\xff\xff\x89\x1d\xc7\x87\x04\x11\x00\x00")

func wwwrootTemplatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwrootTemplatesIndexHtml,
		"wwwroot/templates/index.html",
	)
}

func wwwrootTemplatesIndexHtml() (*asset, error) {
	bytes, err := wwwrootTemplatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wwwroot/templates/index.html", size: 4356, mode: os.FileMode(420), modTime: time.Unix(1510685016, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwrootTemplatesLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\x4b\x53\xdb\xba\x17\xc0\xd7\xe1\x53\xa8\xee\x82\x05\x95\x15\xe7\xc1\xd3\x66\x26\x84\x84\x67\x79\x15\x48\x4b\xa7\x0b\xc5\x3a\xb1\x95\xc8\x92\x91\x94\xc4\x0e\xc3\x77\xff\x8f\x6d\xa0\x81\x69\xff\xb7\xed\xed\xe2\x6e\x9c\x48\xd6\x39\xe7\x77\x9e\xb2\xff\x6e\xff\xbc\x7b\xfd\xe5\xa2\x87\x62\x9b\x88\xdd\x15\xff\xf9\x07\x28\xdb\x5d\xa9\xf9\xef\x30\x46\x7d\x3a\xe3\xa1\x92\x06\x61\x5c\x6c\x09\x2e\x27\x48\x83\x08\x9c\x62\xd7\x41\x86\x2f\xc0\x04\x8e\xb7\x9e\x79\xeb\xa8\xd9\xc8\x9a\x0d\x07\xc5\x1a\x46\x81\x13\x5b\x9b\x9a\x6d\x42\x4c\x13\x4f\x0d\x9e\x83\xb1\xd8\x73\x69\x42\x17\x4a\xd2\xb9\x71\x43\x95\x90\x21\xcd\x0d\x67\xa0\xa4\xe0\x12\x5a\x6e\x9d\x50\x63\xc0\x1a\x32\xaa\x6c\xba\xa9\x8c\x9c\x27\x8e\xaf\x7c\x84\x8e\x7a\xdf\x76\x97\x00\x4c\xac\xb4\x0d\xa7\x16\x55\x24\x7f\xcd\x2a\x0f\x95\xb3\xeb\xbf\xfb\x0a\x92\xf1\xd1\xb7\xca\xed\x27\x02\x61\xd1\x51\x0f\x6d\x3d\x63\x94\x26\x57\x0b\x93\xbf\x69\x71\x9e\xe2\x50\x49\x0b\xd2\x12\x1b\x43\x02\x86\x0c\x95\x2c\x9f\xca\x1a\xab\x69\x4a\x42\x63\x08\x87\x4d\xec\xb9\xa1\x31\xab\xc8\xe6\x29\x04\xab\x16\x32\x5b\xbc\x59\x25\xff\x19\xbe\xc6\x2f\xf0\xd5\x6a\xe8\x55\xe5\xd0\x34\x15\x80\xad\x9a\x86\x31\x2e\x22\x8e\x53\x0d\xa1\x4a\x52\x65\x80\xfd\x85\x3c\x7a\xed\x46\xe6\xb5\x1b\x2f\xd5\x93\x80\xa5\x48\xd2\x04\x02\x27\x31\x85\x6d\x1e\x52\xcb\x95\xc4\xd7\x5c\x40\x57\x09\xa5\x1d\xf4\xe4\x6d\xe0\xbc\x6f\x50\x1a\x42\xf3\x9f\x05\x8f\x12\x1a\xc1\x92\xe0\xbf\x01\x6e\xb5\x32\xaf\xd5\xaa\x80\xd1\x6b\xc3\x33\x0e\xf3\x54\x69\xbb\x64\x69\xce\x99\x8d\x03\x06\x33\x1e\x02\x2e\x17\x1f\x50\xc2\x25\x4f\xa8\xc0\x53\xfe\x9d\xbc\x20\xc2\x70\x3f\xe5\xb3\xc0\xe9\x56\xc2\xf8\x3a\x4f\x97\xa1\xcb\x84\x15\x4d\xbf\x83\xc2\x98\x6a\x03\x36\xb8\xb9\xee\xe3\x4d\x07\x91\x1f\xaa\xf9\x8c\x6f\x3a\xb8\xab\x92\x94\x5a\x3e\x14\xcb\x9a\x8e\x7a\x01\xb0\x08\x3e\x84\xb1\x56\x09\x04\xde\xdb\x00\x1e\x52\xc9\x62\x10\xac\xaf\x39\x48\x26\xf2\x25\xd1\x6b\x3d\x85\xb7\xc7\x3f\xaa\x21\x17\x70\x9e\x5a\x9e\xf0\x45\x51\x15\x2f\xa7\x9b\x8d\xfa\xdb\xc3\xbf\x18\x23\x2e\xb9\xe5\x54\x60\x13\x52\x01\x81\xe7\xd6\x3f\xa0\xa9\x01\x5d\xae\xe9\x50\x40\x90\x83\x71\xc8\xeb\x21\x67\x6c\x2e\xc0\xc4\x00\xf6\x6d\x61\x26\x34\x0b\x99\x74\x5f\x3a\xa2\x58\x94\x49\x7e\x69\x91\x96\x5b\x77\xeb\x98\x8a\x34\xa6\xee\x7a\xd9\x30\x2f\xef\xdc\x84\xcb\xa2\x71\x1c\xc4\xa5\x85\x48\x73\x9b\x17\xf3\x8c\x36\x37\x5b\x58\xcf\xd5\xd1\x15\x98\xf1\x4d\x23\x0f\x9b\x8b\xcd\x83\x5b\x72\x76\x01\x77\x83\xce\xac\xbd\xae\x3f\x25\xa7\x82\x75\x9b\x57\xa4\x73\xb7\x38\xb8\x92\x07\xd9\xe5\xe5\x89\x3c\x99\xa8\xfe\x6d\xdc\xbf\x8c\xcf\x6e\xe6\xbd\xfc\xd8\x41\xa1\x56\xc6\x28\xcd\x23\x2e\x03\x87\x4a\x25\xf3\x44\x4d\x4d\x19\x35\x13\x6a\x9e\x5a\x64\x74\xf8\xdd\x93\x50\x31\x70\xc7\xf7\x53\xd0\x79\xe9\x41\xf5\x17\x37\x5d\xcf\xf5\x5c\x23\x78\x52\xd2\x8e\x7f\x08\xdb\xd9\xe8\xdf\x8d\x37\x66\x6b\x8c\x18\x96\x7c\xbc\x4f\x89\x3c\xbf\x9c\x0b\x7e\x3a\xbb\x31\xc7\xa3\xfd\xc3\xc1\xda\x64\xeb\x3c\x89\x08\x25\xbd\x18\x3a\x2c\xb2\x8b\x33\xd3\x8c\xd3\x11\x8d\xd6\x7b\x6c\xab\x5d\x97\x3f\x87\xf5\x49\xc5\xfa\x53\x6a\x26\xc7\xc6\x0d\x85\x9a\xb2\x91\xa0\x1a\x4a\x74\x3a\xa6\x19\x11\x7c\x68\x88\x05\x1b\x83\x26\x9e\x5b\xf4\xd9\xf8\x79\xfd\x7f\x3c\xd9\x5f\x58\xd6\xb9\xd8\x1b\x5c\x5c\x7d\xfe\xd4\x21\x4d\xf8\xd2\xeb\xdd\x0c\xf4\xa0\x9b\x6f\x1c\xb4\x4f\xfa\x43\xd8\x1c\xf5\xc7\x93\xf6\x71\xe7\x28\xbb\xf9\x72\x78\x32\xd9\xcf\xd6\x2f\xb9\xf4\xf6\x27\x83\xac\xed\x0d\xf7\xf4\xf0\xcf\x3d\xf9\xdd\x4a\x1a\xbf\x2d\xa4\x1f\x3b\x34\xdb\x1b\x0c\x16\xe2\xee\x78\x13\xe8\x16\xed\x7e\x6e\xa5\xbd\x41\x53\xdf\x1e\x8e\xa3\xb1\xdd\x58\xa4\x93\xb3\xf4\x6e\xb2\x56\x6f\xec\x6f\xa5\xf1\x22\x87\xdb\x49\x6f\x6d\xac\xea\x1c\x0e\xf8\xe2\xfe\xe2\xb4\xaf\xf4\xaf\xa4\xa6\xb6\x52\xf3\x2d\xb7\x02\x76\xf7\xaa\xd1\x86\xba\xb1\xe6\xc6\x26\xd4\xa0\x0e\x9b\x81\xb4\x53\x0d\x08\xe3\xa5\xed\x53\x1e\xc5\xd6\xa0\x7d\xcd\x67\x80\xaf\x63\x3d\xf5\x49\xa5\x61\xa5\xf6\xf0\x80\x86\x42\x85\x13\xe4\x14\xdf\x1f\x0e\x72\xd1\xe3\xe3\xc3\x03\x02\xc9\xd0\xe3\xe3\x8a\x4f\xaa\xaf\x92\x15\x7f\xa8\x58\x5e\xc4\x92\xf1\x19\x2a\xfb\xb3\x9a\x63\x98\x0a\x1e\xc9\xed\x10\xa4\x05\xbd\x83\x86\x34\x9c\x44\x5a\x4d\x25\xc3\x61\x31\xe3\xb7\xdf\xd7\xeb\x14\x60\xb4\x83\x52\xca\x18\x97\xd1\xb6\x57\x4f\x33\x54\x3c\x76\x50\x0c\x05\xd6\x76\xbb\x9d\x66\x3b\x45\x9f\xd4\x7c\xba\xd4\xee\xdb\x84\x44\x9a\x4a\x6e\x61\x48\x73\xf7\xd5\x14\x2f\x12\x55\x0a\xd4\x7c\x9e\x44\x28\x14\xd4\x98\xc0\x11\x2a\x52\xce\x33\xdb\x93\xee\x56\x3d\xcd\x9c\xd7\x89\xff\x83\xab\xe2\x69\x1f\xcf\x63\x6e\xa1\xba\x30\x7c\x42\xcb\x44\x10\xc6\x67\xbb\x2b\x08\x21\x54\x46\x86\xb3\xc0\x79\x1a\x87\x4e\xb5\x8d\xd0\xf7\x08\x3f\xbf\x79\x13\xe4\x52\xba\x52\xe4\x93\x2a\xce\x7e\x79\x3f\xec\xfe\x2f\x00\x00\xff\xff\x30\xa1\x81\xe7\x2b\x0a\x00\x00")

func wwwrootTemplatesLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwrootTemplatesLayoutHtml,
		"wwwroot/templates/layout.html",
	)
}

func wwwrootTemplatesLayoutHtml() (*asset, error) {
	bytes, err := wwwrootTemplatesLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wwwroot/templates/layout.html", size: 2603, mode: os.FileMode(420), modTime: time.Unix(1510643331, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _wwwrootTemplatesTicketHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x53\x4b\x6f\x9c\x30\x18\xbc\xe7\x57\x8c\x5c\xf5\x16\x1e\x79\x20\x55\x2c\x41\x4a\x9b\xa6\x0f\x35\xa7\xe6\x92\xa3\x17\x3e\xb0\x15\xb0\x91\xfd\xb1\xd9\x15\xe2\xbf\x57\xb0\xec\x6e\xd2\xe5\x60\x24\x1b\xcf\xcc\x37\x33\x0c\x03\x4a\xaa\xb4\x21\x88\xc2\x1a\x26\xc3\x02\xe3\x78\x91\x95\x7a\x03\xcf\xbb\x86\xee\x44\x2b\xb7\xc1\x9b\x2e\x59\xa5\xb7\x71\xdc\x6d\x57\x68\xa5\xab\xb5\x49\xaf\xe3\x6e\x0b\xd9\xb3\x5d\x41\x91\xae\x15\xa7\x57\xf3\xb9\xc8\x01\xe0\x62\x5a\x86\x01\x6f\x9a\x15\xc2\x1f\x3d\x79\x9e\x80\x31\x3f\x99\x84\x72\x54\xdd\x89\x68\x18\xc2\x5f\x0f\xe3\x28\x4e\x64\x13\x76\xb0\xb6\xcc\xb6\x4d\xaf\x92\x09\x0f\x45\x23\xbd\xbf\x13\x6b\x36\x58\xb3\x09\x6c\xcf\x8d\x36\x14\x68\x53\xd9\x79\xc3\xb7\x22\xcf\x32\x3c\xed\xf0\xac\x8b\x57\x62\x9f\x45\x32\x3f\x08\x20\x53\x1e\x88\x8f\x72\xbe\x3b\x67\xdd\x93\xaf\xc7\x71\x1e\x74\xc1\x97\x0d\x39\xc6\xbc\x06\xa5\x34\x35\x39\x01\x67\x27\x55\xf3\x9e\xc8\x87\x21\x1c\xc7\x2c\x2a\xf5\x26\x1f\x06\x32\xe5\x02\xfb\xde\x2c\xa6\x2d\x07\xb2\xd1\xb5\x49\x51\x90\x61\x72\x2b\x91\x2f\x53\x1f\xe9\xf7\x2a\x4f\x76\x00\x99\x4a\x0e\x08\x85\x6d\xac\x4b\x3f\x25\x49\x22\x72\x63\x99\x52\xb0\xd2\x1e\xda\xc3\x58\xc6\xce\xf6\x0e\xb2\xe0\x5e\x36\xe0\x19\xe6\x12\x5d\x43\xd2\x13\x0a\x45\xc5\x2b\xd6\xb2\x78\x85\xb7\xd6\x84\xc0\xcb\xd9\xc7\x78\xd3\x4d\x03\x25\x37\x04\x89\x6f\xca\x69\xcf\xad\xf4\xe8\x74\xc1\xbd\xa3\xf9\x72\xed\x6c\x6f\xca\x2c\x52\x49\xfe\x4e\xde\xcd\x7f\xf2\xe2\xc7\x2f\xf7\xc9\xe3\x4a\xe4\x2f\xb6\xc7\xcf\x05\xcf\x9a\x4a\xbb\x96\xca\x25\x06\x54\xd6\xe1\x59\x11\xbe\xca\x9d\xd7\x25\xe1\xbe\xdc\x90\x99\x89\x4e\xd4\x7f\xa6\xe6\x78\x3c\x38\xbd\x21\x3c\x2b\xd7\x67\x91\xba\xf9\xc0\x9c\xdf\xf3\xf9\xde\x30\x84\x7f\x1b\xcb\xe1\xa3\x75\xad\x64\x88\xdf\xd2\x20\xbe\xbe\xc4\x4d\x1a\xdf\x76\xad\x98\x62\x3a\x5d\xf9\xd8\x82\x7d\x80\x17\x67\xd1\x75\xd6\x6b\xd6\xd6\xa4\xa8\xf4\x96\xca\x15\x96\x12\xc6\x2b\x34\x54\xf1\xf4\xde\xff\x06\x57\x71\xfc\xf9\x94\xea\xdc\xe6\x05\xe2\x74\x2e\x96\x82\x2b\xe6\x2e\x8d\xa2\xda\x49\xa3\x99\xd6\x72\x17\xae\xf7\x66\x58\x33\x75\x38\x2c\x6c\x1b\x15\x07\x33\x82\x72\x72\x21\x60\xe5\xfa\xa0\xd6\x1b\x6d\xea\xe8\xac\xfc\x9d\xd3\xad\x74\x3b\x91\x3f\x58\x23\x99\x8e\x4d\x5f\xa6\x3a\x0c\x77\x1c\xf9\x5f\x00\x00\x00\xff\xff\xe3\xc3\x2e\xe6\xe1\x03\x00\x00")

func wwwrootTemplatesTicketHtmlBytes() ([]byte, error) {
	return bindataRead(
		_wwwrootTemplatesTicketHtml,
		"wwwroot/templates/ticket.html",
	)
}

func wwwrootTemplatesTicketHtml() (*asset, error) {
	bytes, err := wwwrootTemplatesTicketHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "wwwroot/templates/ticket.html", size: 993, mode: os.FileMode(420), modTime: time.Unix(1510682415, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"wwwroot/templates/index.html": wwwrootTemplatesIndexHtml,
	"wwwroot/templates/layout.html": wwwrootTemplatesLayoutHtml,
	"wwwroot/templates/ticket.html": wwwrootTemplatesTicketHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"wwwroot": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{wwwrootTemplatesIndexHtml, map[string]*bintree{}},
			"layout.html": &bintree{wwwrootTemplatesLayoutHtml, map[string]*bintree{}},
			"ticket.html": &bintree{wwwrootTemplatesTicketHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

